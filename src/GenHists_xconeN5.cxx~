#include "UHH2/MTopJet/include/GenHists_xconeN5.h"
#include "UHH2/MTopJet/include/JetCluster.h"
#include "UHH2/core/include/Event.h"
#include "UHH2/common/include/Utils.h"
#include "UHH2/core/include/PFParticle.h"

#include "UHH2/common/include/TTbarGen.h"

#include <math.h>
#include <vector>

#include "TH1F.h"
#include "TH2F.h"
#include <iostream>

using namespace uhh2;

GenHists_xconeN5::GenHists_xconeN5(uhh2::Context & ctx, const std::string & dirname, const std::string & jetname): Hists(ctx, dirname){
  // book all histograms here
  Combined_Mass1 = book<TH1F>("Combined_Mass1", "M_{jet}", 50, 0, 500);
  Combined_PT1 = book<TH1F>("Combined_PT1", "p_{T}", 50, 0, 1000);
  Combined_Mass2 = book<TH1F>("Combined_Mass2", "M_{jet}", 50, 0, 500);
  Combined_PT2 = book<TH1F>("Combined_PT2", "p_{T}", 50, 0, 1000);
  deltaR_lep_jet1 = book<TH1F>("deltaR_lep_jet1", "#Delta R (lep, jet1)", 80, 0, 4);
  deltaR_lep_jet2 = book<TH1F>("deltaR_lep_jet2", "#Delta R (lep, jet2)", 80, 0, 4);
  deltaR_lep_jet3 = book<TH1F>("deltaR_lep_jet3", "#Delta R (lep, jet3)", 80, 0, 4);
  deltaR_lep_jet4 = book<TH1F>("deltaR_lep_jet4", "#Delta R (lep, jet4)", 80, 0, 4);
  deltaR_lep_combinedjet1 = book<TH1F>("deltaR_lep_combinedjet1", "#Delta R (lep, combined jet1)", 80, 0, 4);
  deltaR_lep_combinedjet2 = book<TH1F>("deltaR_lep_combinedjet2", "#Delta R (lep, combined jet2)", 80, 0, 4);
  deltaR_combinedjet1_combinedjet2 = book<TH1F>("deltaR_combinedjet1_combinedjet2", "#Delta R (combined jet1, combined jet2)", 80, 0, 4);


  // handle for TTbarGen class
  h_ttbargen=ctx.get_handle<TTbarGen>("ttbargen");
  // handle for clustered jets
  h_jets=ctx.get_handle<std::vector<Jet>>(jetname);
}



void GenHists_xconeN5::fill(const Event & event){


  //---------------------------------------------------------------------------------------
  //--------------------------------- define needed objects-----------------------------------
  //---------------------------------------------------------------------------------------
  const auto & ttbargen = event.get(h_ttbargen);
  // define all objects needed
  std::vector<Jet> jets = event.get(h_jets);
  TLorentzVector jet1_v4, jet2_v4, jet3_v4, jet4_v4, combinedjet1_v4, combinedjet2_v4;
  Jet jet1,jet2,jet3,jet4;
  if(jets.size()>0) jet1 = jets.at(0);
  if(jets.size()>1) jet2 = jets.at(1);
  if(jets.size()>2) jet3 = jets.at(2);
  if(jets.size()>3) jet4 = jets.at(3);

  //---------------------------------------------------------------------------------------
  //---------------------------------------------------------------------------------------

  //---------------------------------------------------------------------------------------
  //--------------------------------- Matching --------------------------------------------
  //---------------------------------------------------------------------------------------
  // bool matched = false;
  // get stable particles from ttbar decay and sort them into leptonic and hadronic
  GenParticle bot, q1, q2, bot_lep, lep1, lep2, lepton; //leptons already defined above
  if(jets.size() > 0){
    if(ttbargen.IsTopHadronicDecay()){
      bot = ttbargen.bTop();
      q1 = ttbargen.Wdecay1();
      q2 = ttbargen.Wdecay2();
      bot_lep = ttbargen.bAntitop();
      lep1 = ttbargen.WMinusdecay1();
      lep2 = ttbargen.WMinusdecay2();
    }
    else if(ttbargen.IsAntiTopHadronicDecay()){
      bot = ttbargen.bAntitop();
      q1 = ttbargen.WMinusdecay1();
      q2 = ttbargen.WMinusdecay2();
      bot_lep = ttbargen.bTop();
      lep1 = ttbargen.Wdecay1();
      lep2 = ttbargen.Wdecay2();
    }
    else if(!(ttbargen.IsTopHadronicDecay() || ttbargen.IsAntiTopHadronicDecay())){
	throw runtime_error("no hadronic Top found");
    }
   //check which lep is neutrino and which is elec/muon
    if(abs(lep1.pdgId()) == 11 || abs(lep1.pdgId()) == 13){
      lepton = lep1;
    }
    else if(abs(lep2.pdgId()) == 11 || abs(lep2.pdgId()) == 13){
      lepton = lep2;
    }
  }
  //---------------------------------------------------------------------------------------
  //---------------------------------------------------------------------------------------
  

  //---------------------------------------------------------------------------------------
  //-------- set Lorentz Vectors of 4 jets and combine 3 jets to topjet -------------------
  //---------------------------------------------------------------------------------------
  float dR1, dR2, dR3, dR4;
  if(jets.size() > 3){
    jet1_v4.SetPxPyPzE(jets.at(0).v4().Px(), jets.at(0).v4().Py(), jets.at(0).v4().Pz(), jets.at(0).v4().E());
    jet2_v4.SetPxPyPzE(jets.at(1).v4().Px(), jets.at(1).v4().Py(), jets.at(1).v4().Pz(), jets.at(1).v4().E()); 
    jet3_v4.SetPxPyPzE(jets.at(2).v4().Px(), jets.at(2).v4().Py(), jets.at(2).v4().Pz(), jets.at(2).v4().E()); 
    jet4_v4.SetPxPyPzE(jets.at(3).v4().Px(), jets.at(3).v4().Py(), jets.at(3).v4().Pz(), jets.at(3).v4().E()); 
  
    // claculate distance to Lepton
    dR1 = deltaR(jet1, lep1);
    dR2 = deltaR(jet2, lep1);
    dR3 = deltaR(jet3, lep1);
    dR4 = deltaR(jet4, lep1);
    if(dR1 < dR2 && dR1 < dR3 && dR1 < dR4){
      combinedjet1_v4 = jet2_v4 + jet3_v4 + jet4_v4;
      combinedjet2_v4 = jet1_v4;
    }
    if(dR2 < dR1 && dR2 < dR3 && dR2 < dR4){
      combinedjet1_v4 = jet1_v4 + jet3_v4 + jet4_v4;
      combinedjet2_v4 = jet2_v4;
    }    
    if(dR3 < dR1 && dR3 < dR2 && dR3 < dR4){
      combinedjet1_v4 = jet1_v4 + jet2_v4 + jet4_v4;
      combinedjet2_v4 = jet3_v4;
    }
    if(dR4 < dR1 && dR4 < dR2 && dR4 < dR3){
      combinedjet1_v4 = jet1_v4 + jet2_v4 + jet3_v4;
      combinedjet2_v4 = jet4_v4;
    }
  }
  //---------------------------------------------------------------------------------------
  //---------------------------------------------------------------------------------------
   

  //---------------------------------------------------------------------------------------
  //--------------------------------- Fill Hists here -------------------------------------
  //---------------------------------------------------------------------------------------

  // get weight
  double weight = event.weight;
  ////

  if((jets.size()) > 3){
    Combined_Mass1->Fill(combinedjet1_v4.M(),weight);
    Combined_PT1->Fill(combinedjet1_v4.M(),weight);
    Combined_Mass2->Fill(combinedjet2_v4.M(),weight);
    Combined_PT2->Fill(combinedjet2_v4.M(),weight);
    deltaR_lep_jet1->Fill(dR1, weight);
    deltaR_lep_jet2->Fill(dR2, weight);
    deltaR_lep_jet3->Fill(dR3, weight);
    deltaR_lep_jet4->Fill(dR4, weight);
  }

  double dR_lep_comb1, dR_lep_comb2, dR_comb1_comb2;
  if((jets.size()) > 3){
    dR_lep_comb1 = sqrt( (combinedjet1_v4.Eta() - lep1.eta())*(combinedjet1_v4.Eta() - lep1.eta()) + (combinedjet1_v4.Phi() - lep1.phi())*(combinedjet1_v4.Phi() - lep1.phi()) );
    dR_lep_comb2 = sqrt( (combinedjet2_v4.Eta() - lep1.eta())*(combinedjet2_v4.Eta() - lep1.eta()) + (combinedjet2_v4.Phi() - lep1.phi())*(combinedjet2_v4.Phi() - lep1.phi()) );
    dR_comb1_comb2 = sqrt( (combinedjet1_v4.Eta() - combinedjet2_v4.Eta())*(combinedjet1_v4.Eta() - combinedjet2_v4.Eta()) + (combinedjet1_v4.Phi() - combinedjet2_v4.Phi())*(combinedjet1_v4.Phi() - combinedjet2_v4.Phi()) );
    deltaR_lep_combinedjet1->Fill(dR_lep_comb1, weight);
    deltaR_lep_combinedjet2->Fill(dR_lep_comb2, weight);
    deltaR_combinedjet1_combinedjet2->Fill(dR_comb1_comb2, weight);
  }

  //---------------------------------------------------------------------------------------
  //---------------------------------------------------------------------------------------


  //---------------------------------------------------------------------------------------
  //--------------------------------- Clear all used objects ------------------------------
  //---------------------------------------------------------------------------------------
  jet1_v4.Delete();
  jet2_v4.Delete();
  jet3_v4.Delete();
  jet4_v4.Delete();
  //---------------------------------------------------------------------------------------
  //--------------------------------------------------------------------------------------- 

}


